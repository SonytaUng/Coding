package Hackerank;

import java.util.ArrayList;
import java.util.List;

public class methods {
	public static void fizzBuzz(int n) {
        for(int i = 1; i<=n ; i++){
            if(i%3==0 && i%5==0){
            System.out.println("FizzBuzz");
        }
        else if(i%3 == 0 && i%5 != 0){
            System.out.println("Fizz");
        }
        else if(i%3 != 0 && i%5 == 0){
            System.out.println("Buzz");
        }
        else{
            System.out.println(i);
        }    
        }
    }
	
	 /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<Integer>> arr) {
        int diff= 0;
        int d1 = 0, d2 = 0, t = 0;
        int s = 2147483647;
        for (int i = 0; i < arr.size(); i++) {
            if(s > arr.get(i).size()){
                s = arr.get(i).size() - 1;
            }
            for (int j = 0; j < arr.get(j).size(); j++) {
                d2 += arr.get(i).get(t++);
                d1 += arr.get(i).get(s--);
                break;
            }
        }
        
        diff=Math.abs(d1-d2);
        return diff;
    }
    
    /*
     * Complete the 'countingSort' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static List<Integer> countingSort(List<Integer> arr) {
    // Write your code here

        
        int[] freq_array= new int[100];
        Arrays.fill(freq_array,0);
        for(Integer a:arr){
            freq_array[a]++;
        }
        List<Integer> result=new ArrayList();
        for(int i=0;i<freq_array.length;i++){
            result.add(freq_array[i]);
        }
        return result;
        
        //works woth some test case, got some memory space issue
        // List result = new ArrayList<>();
        // int j = 0;
        // int count = 0;
        // while (j< arr.size()){
        //     for(int i = 0; i< arr.size(); i++){
        //         if(j == arr.get(i)){
        //             count++;
        //         }
        //     }
        //     result.add(count);
        //     count = 0;
        //     j++;
        // }
        // return result;

    }

}
    

}

}

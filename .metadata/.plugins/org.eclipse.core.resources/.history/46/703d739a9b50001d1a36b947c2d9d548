package Hackerank;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Main {

    /**
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */
    public static void miniMaxSum(List<Integer> arr) {
        long min = Integer.MIN_VALUE;
        long max = Integer.MAX_VALUE;
        long minSum = 0;
        long maxSum = 0;
        long allSum = 0;
        
        for(int i = 0; i< arr.size(); i++){
            
            if(arr.get(i)> min){
                max = arr.get(i);
            }
            if (arr.get(i)< max){
                min = arr.get(i);
            } 
            allSum += arr.get(i);
            
            if(i == 0){
                minSum += arr.get(i);
            }
            else if(i == arr.size() - 1){
                maxSum += arr.get(i);
            }
            else{
                minSum+= arr.get(i);
                maxSum+= arr.get(i);
            }
        }
        // System.out.println((allSum - max) + " " + (allSum - min));
        System.out.println((minSum) + " " + (maxSum));
    }
    
    /**
     * 
     * @param arr
     */
    public static void miniMaxSum1(List<Integer> arr) {

            long minSum= 0; 
            long maxSum = 0;
            
            int[] list = new int[arr.size()];
            for(int i=0;i<arr.size();i++){
                list[i] = arr.get(i);
            }
            Arrays.sort(list);
            for(int i=0;i<list.length-1;i++){
                minSum += list[i];
            }
            for(int i=1;i<list.length;i++){
                maxSum += list[i];
            }
       
            System.out.println((minSum) + " " + (maxSum));

	}
    
    /**
     * Complete the 'plusMinus' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void plusMinus(List<Integer> arr) {
    
        double posRate = 0.0;
        double negRate = 0.0;
        double zeroRate = 0.0;
        for(int i = 0; i< arr.size(); i++){
            if(arr.get(i)>0){
                posRate += (double) 1/ (double)arr.size();
            }
            else if(arr.get(i)<0){
                negRate += (double)1/ (double)arr.size();
            }
            else{
                zeroRate += (double)1/(double)arr.size();  
                              
            }
        }
        System.out.printf("%.5f" , posRate);
        System.out.println();
        System.out.printf("%.5f" , negRate);
        System.out.println();
        System.out.printf("%.5f" , zeroRate);
    }
    
    /**
     * 
     * @param s
     * @return
     */
    public static String timeConversion(String s) {
		int hour = Integer.parseInt(s.substring(0, 2)) % 12;
	    if (s.endsWith("PM")) {
	    	hour += 12;
	    }
	    return String.format("%02d", hour) + s.substring(2, 8);
	}
    
    /**
     * Complete the 'lonelyinteger' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int lonelyinteger(List<Integer> a) {
    // Write your code here
        int result;
        TreeMap<Integer, Integer> map = new TreeMap<>();
       
        for(int i = 0; i<a.size(); i++){
            if(map.containsKey(a.get(i))){
                  map.remove(a.get(i));
            }
            else{
                map.put(a.get(i),1);
            }
        }
        result = map.firstKey();
        return result;

    }
    
    /**
     * Main class to test the methods
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
//        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
//
//        int n = Integer.parseInt(bufferedReader.readLine().trim());
//
//        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
//            .map(Integer::parseInt)
//            .collect(toList());
//
//        Result.plusMinus(arr);
//
//        bufferedReader.close();
    	
    	int[] arr = {1,2,3,4,3,2,1};
    	ArrayList <Integer> aList = new ArrayList<>();
    	for (int i; i< arr.length; i++) {
    		aList.add(arr[i]);
    	}
    	System.out.println(aList);
    	//lonelyinteger(arr);
    	
        
        
    }
}



